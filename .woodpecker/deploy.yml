# Woodpecker CI Deploy Pipeline
# This pipeline handles production deployments

# Only run on main branch and tags
when:
  - event: [push, tag]
    branch: main

steps:
  # Pre-deployment checks
  - name: pre-deploy-check
    image: python:3.11-slim
    commands:
      - echo "üîç Running pre-deployment checks..."
      - |
        if [ -z "${DISCORD_BOT_TOKEN}" ]; then
          echo "‚ùå DISCORD_BOT_TOKEN is required for deployment"
          exit 1
        fi
      - |
        if [ -z "${OPENAI_API_KEY}" ]; then
          echo "‚ùå OPENAI_API_KEY is required for deployment"
          exit 1
        fi
      - echo "‚úÖ Environment variables validated"

  # Build production image
  - name: build-production
    image: docker:24-dind
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_TLS_CERTDIR: /certs
      DOCKER_TLS_VERIFY: "1"
      DOCKER_CERT_PATH: /certs/client
    volumes:
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client
    commands:
      - echo "üèóÔ∏è Building production Docker image..."
      - docker build -t emoji-bot:production-${CI_COMMIT_SHA} .
      - docker tag emoji-bot:production-${CI_COMMIT_SHA} emoji-bot:production-latest
      - echo "‚úÖ Production image built!"

  # Deploy using docker-compose
  - name: deploy-with-compose
    image: docker:24-dind
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_TLS_CERTDIR: /certs
      DOCKER_TLS_VERIFY: "1"
      DOCKER_CERT_PATH: /certs/client
    volumes:
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client
    commands:
      - echo "üöÄ Deploying with docker-compose..."
      - |
        # Install docker-compose
        apk add --no-cache curl
        curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
      - |
        # Update the docker-compose.yml to use the new image
        sed -i "s|build: \.|image: emoji-bot:production-${CI_COMMIT_SHA}|" docker-compose.yml
      - |
        # Deploy the application
        docker-compose down || true
        docker-compose up -d
      - echo "‚úÖ Deployment completed!"

  # Health check
  - name: health-check
    image: docker:24-dind
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_TLS_CERTDIR: /certs
      DOCKER_TLS_VERIFY: "1"
      DOCKER_CERT_PATH: /certs/client
    volumes:
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client
    commands:
      - echo "üè• Running health checks..."
      - sleep 30  # Wait for container to start
      - |
        # Check if container is running
        if docker ps | grep emoji-bot; then
          echo "‚úÖ Container is running"
        else
          echo "‚ùå Container is not running"
          docker logs emoji-bot
          exit 1
        fi
      - echo "‚úÖ Health check passed!"

  # Cleanup old images
  - name: cleanup
    image: docker:24-dind
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_TLS_CERTDIR: /certs
      DOCKER_TLS_VERIFY: "1"
      DOCKER_CERT_PATH: /certs/client
    volumes:
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client
    commands:
      - echo "üßπ Cleaning up old Docker images..."
      - docker image prune -f
      - echo "‚úÖ Cleanup completed!"

services:
  - name: docker
    image: docker:24-dind
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: /certs
    volumes:
      - docker-certs-ca:/certs/ca
      - docker-certs-client:/certs/client

volumes:
  - name: docker-certs-ca
    temp: {}
  - name: docker-certs-client
    temp: {}

# Moved to top of file
